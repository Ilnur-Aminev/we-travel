{"version":3,"sources":["webpack:///./src/sections/articles/Articles.About.tsx","webpack:///./src/templates/articles.template.tsx","webpack:///./src/components/Navigation/Navigation.Paginator.tsx"],"names":["ArticlesAbout","about","useStaticQuery","site","edges","node","siteMetadata","AboutSection","id","AboutText","Section","ArticlesPage","location","pageContext","siteUrl","allSite","articles","group","authors","additionalContext","Layout","SEO","pathname","narrow","showAuthorInfo","header","ArticlesPaginator","show","pageCount","ArticlesGradient","p","theme","colors","gradient","colorModeTransition","mediaqueries","tablet","Paginator","maxPages","count","props","current","index","pageRoot","pathPrefix","getFullPath","n","isAbsolute","nextPath","previousPath","render","this","hasNext","hasPrevious","rel","href","Frame","PageButton","to","getPageLinks","MobileReference","PageNumberButton","style","opacity","Spacer","aria-hidden","color","previousPage","pagesRange","range","truncatedRange","slice","unshift","splice","length","push","Set","map","page","i","key","className","Component","paginationItemMixin","css","primary","desktop_up","Link","phablet"],"mappings":"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","file":"component---src-templates-articles-template-tsx-343a104242c48a5f86dd.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport Section from '../../components/Section';\nimport { SectionHeader } from './Articles.Hero';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nconst aboutQuery = graphql`\n  {\n    site: allSite {\n      edges {\n        node {\n          siteMetadata {\n            about\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const ArticlesAbout: React.FC = () => {\n  const results = useStaticQuery(aboutQuery);\n  const about = results.site.edges[0].node.siteMetadata.about;\n\n  return (\n    <AboutSection id=\"Articles__About\">\n      <SectionHeader>О проекте</SectionHeader>\n      <AboutText>{about}</AboutText>\n    </AboutSection>\n  );\n};\n\nconst AboutSection = styled(Section)`\n  margin: 100px auto 250px;\n`;\n\nconst AboutText = styled.div`\n  margin-top: 30px;\n  white-space: pre-wrap;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Section from '../components/Section';\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport { Paginator } from '../components/Navigation/Navigation.Paginator';\n\nimport mediaqueries from '../styles/media';\nimport ArticlesHero from '../sections/articles/Articles.Hero';\nimport { ArticlesList } from '../sections/articles/Articles.List';\nimport { ArticlesTemplate } from '../types';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { ArticlesAbout } from '../sections/articles/Articles.About';\n\nconst query = graphql`\n  {\n    allSite {\n      edges {\n        node {\n          siteMetadata {\n            siteUrl\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ArticlesPage: ArticlesTemplate = ({ location, pageContext }) => {\n  const results = useStaticQuery(query);\n  const { siteUrl } = results.allSite.edges[0].node.siteMetadata;\n  const articles = pageContext.group;\n  const authors = pageContext.additionalContext.authors;\n\n  return (\n    <Layout>\n      <SEO pathname={location.pathname} />\n      <ArticlesHero authors={authors} />\n      <Section narrow>\n        <ArticlesList articles={articles} authors={authors} showAuthorInfo header=\"Интересные места со всего мира\" />\n        <ArticlesPaginator show={pageContext.pageCount > 1}>\n          <Paginator {...pageContext} siteUrl={siteUrl} />\n        </ArticlesPaginator>\n      </Section>\n      <ArticlesAbout />\n      <ArticlesGradient />\n    </Layout>\n  );\n};\n\nexport default ArticlesPage;\n\nconst ArticlesGradient = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 590px;\n  z-index: 0;\n  pointer-events: none;\n  background: ${p => p.theme.colors.gradient};\n  transition: ${p => p.theme.colorModeTransition};\n`;\n\nconst ArticlesPaginator = styled.div<{ show: boolean }>`\n  ${p => p.show && `margin-top: 90px;`}\n\n  ${p =>\n    p.show &&\n    mediaqueries.tablet`\n    margin-top: 16px;\n  `}\n`;\n","import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport { Link } from 'gatsby';\nimport { Helmet } from 'react-helmet';\n\nimport mediaqueries from '../../styles/media';\nimport { range } from '../../utils';\n\nimport { IPaginator } from '../../types';\n\n/**\n * <Paginator />\n *\n * 1 2 3 ... final page NEXT\n * Component to navigate between different pages on a series of blog post, for example.\n *\n * We're using a <nav> element here so make sure to put the pagination component\n * INSIDE of a section to make sure the markup stays contextually relevant\n *\n * Receives the gatsby-paginator props\n */\n\nexport class Paginator extends Component<IPaginator, {}> {\n  maxPages = 3;\n  count = this.props.pageCount;\n  current = this.props.index;\n  pageRoot = this.props.pathPrefix;\n  siteUrl = this.props.siteUrl || '';\n\n  /**\n   * Utility function to return a 1 ... 5 6 7 ... 10 style pagination\n   */\n  get getPageLinks() {\n    const current = this.current;\n    const count = this.count;\n    const maxPages = this.maxPages;\n\n    // Current is the page we're on\n    // We want to show current - 1, current, current + 1\n    // Of course if we're on page 1, we don't want a page 0\n    const previousPage = current === 1 ? current : current - 1;\n\n    // Now create a range of numbers from the previousPage to the total pages (count)\n    const pagesRange = range(previousPage, count + 1 - previousPage);\n\n    // We might need to truncate that pagesRange if it's\n    // more than the max pages we wish to display (3)\n    const truncatedRange: Array<number | null> = pagesRange.slice(0, maxPages);\n\n    // Throughout this function we might add a null to our pages range.\n    // When it comes to rendering our range if we find a null we'll add a spacer.\n\n    // We might need a spacer at the start of the pagination e.g. 1 ... 3 4 5 etc.\n    // If we're after the second page, we need a ... spacer (3 and up)\n    if (pagesRange[0] > 2) {\n      truncatedRange.unshift(null);\n    }\n    // If we're after the first page, we need page 1 to appear (2 and up)\n    if (pagesRange[0] > 1) {\n      truncatedRange.unshift(1);\n    }\n\n    // If we're on the final page, then there won't be a \"next\" page and\n    // the pagination will end up looking a bit short (e.g. on 8 pages ... 7, 8)\n    // Push to the end an extra page maxPages from the end\n    if (pagesRange[0] + 1 === count && pagesRange[0] - 1 > 0) {\n      truncatedRange.splice(pagesRange.length - 1 - maxPages, 0, pagesRange[0] - 1);\n    }\n\n    // We might need a spacer at the end of the pagination e.g. 4 5 6 ... 8\n    // If we're before the penultimate page, we need a ... spacer\n    if (pagesRange[0] + maxPages < count) {\n      truncatedRange.push(null);\n    }\n\n    // If we're before the last page, we need page <last> to appear\n    if (pagesRange[0] + maxPages - 1 < count) {\n      truncatedRange.push(count);\n    }\n\n    return [...new Set(truncatedRange)].map((page: number | null, i) =>\n      page === null ? (\n        // If you find a null in the truncated array then add a spacer\n        <Spacer key={`PaginatorPage_spacer_${i}`} aria-hidden={true} />\n      ) : (\n        // Otherwise render a PageButton\n        <PageNumberButton\n          key={`PaginatorPage_${page}`}\n          to={this.getFullPath(page)}\n          style={{ opacity: current === page ? 1 : 0.3 }}\n          className=\"Paginator__pageLink\"\n        >\n          {page}\n        </PageNumberButton>\n      )\n    );\n  }\n\n  /**\n   * Utility to turn an index in to a page path.\n   * All it really does is glue the page path to the front,\n   * but note there's special behaviour for page 1 where the URL should be / not /page/1\n   */\n  getFullPath = (n: number, isAbsolute: boolean = false) => {\n    const prefix = isAbsolute ? this.siteUrl : '';\n    return prefix + (n === 1 ? this.pageRoot : this.pageRoot + 'page/' + n + '/');\n  };\n\n  nextPath = (isAbsolute: boolean = false) => {\n    return this.getFullPath(this.current + 1, isAbsolute);\n  };\n\n  previousPath = (isAbsolute: boolean = false) => {\n    return this.getFullPath(this.current - 1, isAbsolute);\n  };\n\n  render() {\n    const count = this.count;\n    const current = this.current;\n\n    if (count <= 1) return null;\n    const hasNext = this.current < this.count;\n    const hasPrevious = this.current > 1;\n\n    return (\n      <>\n        <Helmet>\n          {hasPrevious && <link rel=\"prev\" href={this.previousPath(true)} />}\n          {hasPrevious && <link rel=\"canonical\" href={this.getFullPath(1, true)} />}\n          {hasNext && <link rel=\"next\" href={this.nextPath(true)} />}\n        </Helmet>\n        <Frame>\n          {hasPrevious && <PageButton to={this.previousPath()}>Назад</PageButton>}\n          {this.getPageLinks}\n          <MobileReference>\n            <PageNumberButton style={{ opacity: 1 }}>\n              {this.current}\n            </PageNumberButton>\n            {this.current + 2 <= this.count && <Spacer aria-hidden={true} />}\n            {this.current < this.count && (\n              <PageNumberButton to={this.getFullPath(this.count)} style={{ color: '#73737D' }}>\n                {this.count}\n              </PageNumberButton>\n            )}\n          </MobileReference>\n          {hasNext && <PageButton to={this.nextPath()}>Вперед</PageButton>}\n        </Frame>\n      </>\n    );\n  }\n}\n\nconst paginationItemMixin = p => css`\n  line-height: 1;\n  color: ${p.theme.colors.primary};\n  padding: 0;\n  width: 6.8rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-variant-numeric: tabular-nums;\n\n  ${mediaqueries.desktop_up`\n    display: block;\n    width: auto;\n    padding: 2rem;\n\n    &:first-of-type {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n    }\n  `}\n\n  ${mediaqueries.tablet`\n    width: auto;\n    margin-right: 24px;\n  `}\n`;\n\nconst PageButton = styled(Link)`\n  font-weight: 600;\n  font-size: 18px;\n  text-decoration: none;\n  color: ${p => p.theme.colors.primary};\n  ${paginationItemMixin}\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n    text-decoration: underline;\n  }\n`;\n\nconst PageNumberButton = styled(Link)`\n  font-weight: 400;\n  font-size: 18px;\n  text-decoration: none;\n  color: ${p => p.theme.colors.primary};\n  ${paginationItemMixin}\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n    text-decoration: underline;\n  }\n`;\n\nconst Spacer = styled.span`\n  opacity: 0.3;\n  ${paginationItemMixin}\n  &::before {\n    content: '...';\n  }\n\n  ${mediaqueries.phablet`\n    display: none;\n`}\n`;\n\nconst MobileReference = styled.span`\n  font-weight: 400;\n  ${paginationItemMixin}\n  display: none;\n  color: ${p => p.theme.colors.primary};\n\n  em {\n    font-style: normal;\n    color: ${p => p.theme.colors.primary};\n  }\n\n  ${Spacer} {\n    display: block;\n    opacity: 1;\n  }\n\n  ${mediaqueries.phablet`\n    display: flex;\n    margin-right: 0;\n  `}\n`;\n\nconst Frame = styled.nav`\n  position: relative;\n  z-index: 1;\n  display: inline-flex;\n  justify-content: space-between;\n  align-items: center;\n\n  ${mediaqueries.desktop_up`\n    justify-content: flex-start;\n      ${MobileReference} { display: none; }\n  `}\n\n  ${mediaqueries.tablet`\n    .Paginator__pageLink {\n      left: -15px;\n    }\n  `}\n\n  ${mediaqueries.phablet`\n    .Paginator__pageLink {\n      display: none;\n    }\n  `}\n`;\n"],"sourceRoot":""}